# This is the sample configuration of a plugin. The sample DaZeus configuration
# includes plugins/*.conf, so if you place files like this in the "plugins"
# directory, they will be loaded as plugins.
#
# You do not need a Plugin definition to connect new plugins to DaZeus: all you
# have to do is run the plugin with the correct socket parameter. For example:
# ./dazeus-plugin-helloworld unix:dazeus.sock
# ./dazeus-plugin-helloworld tcp:localhost:9876
# However, a <Plugin> definiton allows two things: it defines configuration for
# the plugin using "Var" statements as shown below, and if you give an
# Executable, it will be automatically run by the DaZeus process. The added
# benefit is that DaZeus will monitor the plugins' state; if it crashes, it
# will be automatically re-started.

# The internal name of the plugin:
<Plugin helloworld>
	# Working directory of the plugin. If relative, counts from the Plugins
	# directory as set in dazeus.conf. If not set, defaults to the name of
	# the plugin.
	#Path dazeus-helloworld
	# File that is supposed to be run. If relative, counts from the working
	# directory of the plugin.
	Executable hello
	# Scope can be "Global" (meaning the plugin will be run once) or
	# "Network" (meaning the plugin will be run once for each network).
	Scope Network
	# The parameters that will be given to the executable. These are not
	# passed to a shell; simple double-quotes and single-quotes are
	# supported, as is metacharacter escaping using '\' (inside and outside
	# quotes). %s will be replaced with a path to the DaZeus socket, %n
	# will be replaced by the network name. A literal % can be written as
	# \% or %%.
	Parameters %s %n

	# This is the actual configuration for the legacyd at this moment:
	Var "hellochannel" "#dazeus"
	Var "hellomessage" "Hello World!"
</Plugin>
